// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
)

const getNextObservation = `-- name: GetNextObservation :one
SELECT id, plate_number, timestamp, location, road_id FROM plate_observation WHERE
    plate_number = ?1 AND
    road_id = ?2 AND
    timestamp > ?3
ORDER BY timestamp ASC LIMIT 1
`

type GetNextObservationParams struct {
	PlateNumber string
	RoadID      int64
	Timestamp   int64
}

func (q *Queries) GetNextObservation(ctx context.Context, arg GetNextObservationParams) (PlateObservation, error) {
	row := q.db.QueryRowContext(ctx, getNextObservation, arg.PlateNumber, arg.RoadID, arg.Timestamp)
	var i PlateObservation
	err := row.Scan(
		&i.ID,
		&i.PlateNumber,
		&i.Timestamp,
		&i.Location,
		&i.RoadID,
	)
	return i, err
}

const getObservationById = `-- name: GetObservationById :one
SELECT id, plate_number, timestamp, location, road_id FROM plate_observation WHERE id = ?1
`

func (q *Queries) GetObservationById(ctx context.Context, id int64) (PlateObservation, error) {
	row := q.db.QueryRowContext(ctx, getObservationById, id)
	var i PlateObservation
	err := row.Scan(
		&i.ID,
		&i.PlateNumber,
		&i.Timestamp,
		&i.Location,
		&i.RoadID,
	)
	return i, err
}

const getPreviousObservation = `-- name: GetPreviousObservation :one
SELECT id, plate_number, timestamp, location, road_id FROM plate_observation WHERE
    plate_number = ?1 AND
    road_id = ?2 AND
    timestamp < ?3
ORDER BY timestamp DESC LIMIT 1
`

type GetPreviousObservationParams struct {
	PlateNumber string
	RoadID      int64
	Timestamp   int64
}

func (q *Queries) GetPreviousObservation(ctx context.Context, arg GetPreviousObservationParams) (PlateObservation, error) {
	row := q.db.QueryRowContext(ctx, getPreviousObservation, arg.PlateNumber, arg.RoadID, arg.Timestamp)
	var i PlateObservation
	err := row.Scan(
		&i.ID,
		&i.PlateNumber,
		&i.Timestamp,
		&i.Location,
		&i.RoadID,
	)
	return i, err
}

const getRoad = `-- name: GetRoad :one
SELECT id, speed_limit FROM road WHERE id = ?1
`

func (q *Queries) GetRoad(ctx context.Context, id int64) (Road, error) {
	row := q.db.QueryRowContext(ctx, getRoad, id)
	var i Road
	err := row.Scan(&i.ID, &i.SpeedLimit)
	return i, err
}

const insertPlateObservation = `-- name: InsertPlateObservation :one
INSERT INTO plate_observation
    (plate_number, road_id, timestamp, location) VALUES
    (?1, ?2, ?3, ?4)
RETURNING id
`

type InsertPlateObservationParams struct {
	PlateNumber string
	RoadID      int64
	Timestamp   int64
	Location    int64
}

func (q *Queries) InsertPlateObservation(ctx context.Context, arg InsertPlateObservationParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertPlateObservation,
		arg.PlateNumber,
		arg.RoadID,
		arg.Timestamp,
		arg.Location,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertRoad = `-- name: InsertRoad :exec
INSERT INTO road (id, speed_limit) VALUES (?1, ?2)
`

type InsertRoadParams struct {
	ID         int64
	SpeedLimit int64
}

func (q *Queries) InsertRoad(ctx context.Context, arg InsertRoadParams) error {
	_, err := q.db.ExecContext(ctx, insertRoad, arg.ID, arg.SpeedLimit)
	return err
}
