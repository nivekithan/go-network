// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
)

const getAllAssestsPrice = `-- name: GetAllAssestsPrice :many
SELECT id, assest_id, timestamp, price FROM assest_price
`

func (q *Queries) GetAllAssestsPrice(ctx context.Context) ([]AssestPrice, error) {
	rows, err := q.db.QueryContext(ctx, getAllAssestsPrice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssestPrice
	for rows.Next() {
		var i AssestPrice
		if err := rows.Scan(
			&i.ID,
			&i.AssestID,
			&i.Timestamp,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAssestPrice = `-- name: InsertAssestPrice :exec

INSERT INTO assest_price
    (id, assest_id, timestamp, price )
VALUES
    (?, ?, ?, ? )
`

type InsertAssestPriceParams struct {
	ID        string
	AssestID  string
	Timestamp int64
	Price     int64
}

func (q *Queries) InsertAssestPrice(ctx context.Context, arg InsertAssestPriceParams) error {
	_, err := q.db.ExecContext(ctx, insertAssestPrice,
		arg.ID,
		arg.AssestID,
		arg.Timestamp,
		arg.Price,
	)
	return err
}
